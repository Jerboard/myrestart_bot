from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.enums.message_entity_type import MessageEntityType

from datetime import datetime, timedelta
from asyncio import sleep

import pytz

import db
import keyboards as kb
from init import dp, TZ, bot
from utils.cover_photos import get_cover_photo
from enums import BaseCB, BaseState, UserStatus


# –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
# @dp.message(lambda msg: msg.content_type == 'photo')
# async def save_photo(msg: Message) -> None:
#     print(f'"{msg.caption}": "{msg.photo[-1].file_id}"')
    # print(f'"{msg.photo[-1].file_id}",')


# –∏–Ω—Ñ–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
@dp.callback_query(lambda cb: cb.data.startswith(BaseCB.FIRST_VISIT.value))
async def first_visit(cb: CallbackQuery):
    _, step_str = cb.data.split(':')
    step = int(step_str) + 1

    photo_id = get_cover_photo ('first_visit')
    keyboard = kb.get_first_visit_kb(step)
    if step == 1:
        text = '–¢–µ–∫—Å—Ç 1'
    elif step == 2:
        text = '–¢–µ–∫—Å—Ç 2'
    elif step == 3:
        text = '–¢–µ–∫—Å—Ç 3'
    elif step == 4:
        text = '–¢–µ–∫—Å—Ç 4'
    elif step == 5:
        text = '–¢–µ–∫—Å—Ç 5'
    else:
        await db.add_user(
            user_id=cb.from_user.id,
            full_name=cb.from_user.full_name,
            username=cb.from_user.username)

        text = '–¢–µ–∫—Å—Ç 1 (—Ç–æ —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ)'
        photo_id = get_cover_photo ('start')
        keyboard = kb.get_start_kb ()

    photo = InputMediaPhoto (media=photo_id, caption=text)
    await cb.message.edit_media (media=photo, reply_markup=keyboard)


# –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
@dp.message(CommandStart())
async def command_start_handler(msg: Message, state: FSMContext) -> None:
    await state.clear()
    user_info = await db.get_user_info(msg.from_user.id)
    if not user_info:
        text = '–¢–µ–∫—Å—Ç 1'
        photo = get_cover_photo ('first_visit')
        keyboard = kb.get_first_visit_kb (1)

    else:
        text = '–¢–µ–∫—Å—Ç 1 (—Ç–æ —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ)'
        photo = get_cover_photo ('start')
        keyboard = kb.get_start_kb()

    await msg.answer_photo(
        photo=photo,
        caption=text,
        protect_content=True,
        reply_markup=keyboard)


# –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É
@dp.callback_query(lambda cb: cb.data.startswith(BaseCB.BACK_START.value))
async def back_start(cb: CallbackQuery):
    text = '–¢–µ–∫—Å—Ç 1 (—Ç–æ —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ)'
    photo = InputMediaPhoto(media=get_cover_photo ('start'), caption=text)
    await cb.message.edit_media(media=photo, reply_markup=kb.get_start_kb())


# –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–Ω—Ñ–æ
@dp.callback_query(lambda cb: cb.data.startswith(BaseCB.TRIAL_INFO.value))
async def trial_info(cb: CallbackQuery, state: FSMContext):
    user_info = await db.get_user_info (cb.from_user.id)

    if user_info.status == UserStatus.NEW.value:
        await state.set_state(BaseState.SEND_EMAIL_TRIAL.value)
        await state.update_data(data={'message_id': cb.message.message_id})

        text = ('–ò–Ω—Ñ–æ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 54 —á–∞—Å–∞\n\n'
                '–ß—Ç–æ–± –Ω–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã')
        photo = InputMediaPhoto(media=get_cover_photo ('default'), caption=text)
        await cb.message.edit_media(media=photo, reply_markup=kb.get_back_button(BaseCB.BACK_START.value))

    elif user_info.start_trial:
        end_trial = TZ.localize(user_info.start_trial) + timedelta (hours=54)
        text = f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {end_trial.strftime ("%H:%M %d.%m.%Y")}'

        photo = InputMediaPhoto (media=get_cover_photo ('default'), caption=text)
        await cb.message.edit_media (media=photo, reply_markup=kb.get_back_button (BaseCB.BACK_START.value))

    else:
        text = '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'
        await cb.answer (text, show_alert=True)


# –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ä—Ç
@dp.message(StateFilter(BaseState.SEND_EMAIL_TRIAL.value))
async def send_email_trial(msg: Message, state: FSMContext) -> None:
    if msg.entities and msg.entities [0].type == MessageEntityType.EMAIL:
        start_trial = datetime.now(TZ)
        end_trial = start_trial + timedelta(hours=54)

        await db.update_user_info(
            user_id=msg.from_user.id,
            email=msg.text,
            status=UserStatus.ACTIVE.value,
            start_trial=start_trial
        )
        data = await state.get_data()
        await state.clear()

        text = f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {end_trial.strftime("%H:%M %d.%m.%Y")}'
        photo = InputMediaPhoto (media=get_cover_photo ('default'), caption=text)
        await bot.edit_message_media (
            chat_id=msg.chat.id,
            message_id=data['message_id'],
            media=photo,
            reply_markup=kb.get_back_button (BaseCB.BACK_START.value))

    else:
        sent = await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã')
        await sleep(3)
        await sent.delete()


# –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
@dp.callback_query(lambda cb: cb.data.startswith('close'))
async def in_dev(cb: CallbackQuery):
    await cb.message.delete()


# –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
@dp.callback_query(lambda cb: cb.data.startswith('in_dev'))
async def in_dev(cb: CallbackQuery):
    await cb.answer('üõ† –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


# example = {'EET': {'msk': -1, 'msk_str': '-1 —á–∞—Å', 'utc': +2, 'utc_str': 'UTC + 2 ', 'cities': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, –†–∏–≥–∞', 'tz': 'Europe/Moscow'}}
# cosnom_tz = '''
# –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (EET)	-1 —á–∞—Å	UTC+2	–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, –†–∏–≥–∞
# –°–∞–º–∞—Ä–∞ (SAMT) 	0 —á–∞—Å–æ–≤	UTC+4	–ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥,–°–∞–º–∞—Ä–∞, –£—Ñ–∞, –ö–∞–∑–∞–Ω—å, –ß–µ–ª—è–±–∏–Ω—Å–∫, –î—É–±–∞–π
# –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (YEKT)	+2 —á–∞—Å–∞	UTC+5	–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ü–µ—Ä–º—å, –£–ª—å—è–Ω–æ–≤—Å–∫, –¢—é–º–µ–Ω—å, –¢–∞—à–∫–µ–Ω—Ç, –ú–∞–ª—å–¥–∏–≤—ã, –ò—Å–ª–∞–º–∞–±–∞–¥, –ê—à—Ö–∞–±–∞–¥
# –û–º—Å–∫ (OMST)	+3 —á–∞—Å–∞	UTC+6	–û–º—Å–∫, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ë–∞—Ä–Ω–∞—É–ª, –¢–æ–º—Å–∫
# –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (KRAT)	+4 —á–∞—Å–∞	UTC+7	–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ò—Ä–∫—É—Ç—Å–∫, –ö–µ–º–µ—Ä–æ–≤–æ, –ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫
# –ò—Ä–∫—É—Ç—Å–∫ (IRKT)	+5 —á–∞—Å–æ–≤	UTC+8	–ò—Ä–∫—É—Ç—Å–∫, –£–ª–∞–Ω-–£–¥—ç, –ß–∏—Ç–∞, –ë—Ä–∞—Ç—Å–∫
# –Ø–∫—É—Ç—Å–∫ (YAKT)	+6 —á–∞—Å–æ–≤	UTC+9	–Ø–∫—É—Ç—Å–∫, –•–∞–±–∞—Ä–æ–≤—Å–∫, –ß–∏—Ç–∞, –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫
# –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (VLAT)	+7 —á–∞—Å–æ–≤	UTC+10	–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –•–∞–±–∞—Ä–æ–≤—Å–∫, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ß–∏—Ç–∞
# –ú–∞–≥–∞–¥–∞–Ω (MAGT)	+8 —á–∞—Å–æ–≤	UTC+11	–ú–∞–≥–∞–¥–∞–Ω, –Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –•–∞–±–∞—Ä–æ–≤—Å–∫
# –ö–∞–º—á–∞—Ç–∫–∞ (PETT)	+9 —á–∞—Å–æ–≤	UTC+12	–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π, –ú–∞–≥–∞–¥–∞–Ω, –Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –ê–Ω–∞–¥—ã—Ä—å, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π, –ú–∞–≥–∞–¥–∞–Ω, –Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫
# –ê—Å—Ç–∞–Ω–∞ (ALMT)	+2 —á–∞—Å–∞	UTC+6	–ê—Å—Ç–∞–Ω–∞
# –¢–±–∏–ª–∏—Å–∏ (GET)	+1 —á–∞—Å	UTC+4	–¢–±–∏–ª–∏—Å–∏, –ë–∞–∫—É , –ï—Ä–µ–≤–∞–Ω
# –ö–∞–±—É–ª (AFT)	+1.5 —á–∞—Å–∞	UTC+4:30	–ö–∞–±—É–ª
# –¢–µ–≥–µ—Ä–∞–Ω (IRST)	+1.5 —á–∞—Å–∞	UTC+3:30	–¢–µ–≥–µ—Ä–∞–Ω
# –°–∏–¥–Ω–µ–π (AEDT)	+8 —á–∞—Å–æ–≤	UTC+11	–°–∏–¥–Ω–µ–π, –ú–µ–ª—å–±—É—Ä–Ω, –ë—Ä–∏—Å–±–µ–Ω
# –¢–æ–∫–∏–æ (JST)	+6 —á–∞—Å–æ–≤	UTC+9	–¢–æ–∫–∏–æ, –°–µ—É–ª, –®–∞–Ω—Ö–∞–π, –ì–æ–Ω–∫–æ–Ω–≥
# –ë–∞–Ω–≥–∫–æ–∫ (ICT)	+4 —á–∞—Å–∞	UTC+7	–ë–∞–Ω–≥–∫–æ–∫, –î–∂–∞–∫–∞—Ä—Ç–∞, –ß–∏—Ç—Ñ–æ
# –î–∞—Ä–≤–∏–Ω (ACST)	+6.5 —á–∞—Å–∞	UTC+9:30	–î–∞—Ä–≤–∏–Ω
# –ê–¥–µ–ª–∞–∏–¥–∞ (ACDT)	+7.5 —á–∞—Å–∞	UTC+10:30	–ê–¥–µ–ª–∞–∏–¥–∞
# –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (PST)	-11 —á–∞—Å–æ–≤	UTC-8	–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å, –°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ, –°–∏—ç—Ç–ª
# –ß–∏–∫–∞–≥–æ (CST)	-9 —á–∞—Å–æ–≤	UTC-6	–ß–∏–∫–∞–≥–æ, –ú–µ—Ö–∏–∫–æ, –õ–∏–º–∞, –¢–æ—Ä–æ–Ω—Ç–æ
# –ù—å—é-–ô–æ—Ä–∫ (EST)	-8 —á–∞—Å–æ–≤	UTC-5	–ù—å—é-–ô–æ—Ä–∫, –õ–∏–º–∞, –¢–æ—Ä–æ–Ω—Ç–æ, –õ–∞-–•–∞–±–∞–Ω–∞
# –°–∞–Ω-–ü–∞—É–ª—É (BRT)	-6 —á–∞—Å–æ–≤	UTC-3	–°–∞–Ω-–ü–∞—É–ª—É, –ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å
# –°–∞–Ω—Ç—å—è–≥–æ (CLT)	-7 —á–∞—Å–æ–≤	UTC-4	–°–∞–Ω—Ç—å—è–≥–æ, –õ–∞-–ü–∞—Å, –ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å
# –ê–Ω–∫–æ—Ä–∏–¥–∂ (AKST)	-12 —á–∞—Å–æ–≤	UTC-9	–ê–Ω–∫–æ—Ä–∏–¥–∂
# –ì–æ–Ω–æ–ª—É–ª—É (HAST)	-14 —á–∞—Å–æ–≤	UTC-10	–ì–æ–Ω–æ–ª—É–ª—É'''
#
# c = 0
# for row in cosnom_tz.split('\n'):
#     c += 1
#     print(f'{c}: {row.split("	")[1:]}')